library IEEE;
use IEEE.std_logic_vector.all;

Package CPU_Package is
	constant address_size : integer := 4;
	constant data_size : integer := 4;
	constant operation_size : integer := 4;
	constant instruction_size : integer := 10;

	subtype data_word is std_logic_vector(data_size-1 downto 0);
	subtype address_bus is std_logic_vector(address_size-1 downto 0);
	subtype data_buss is std_logic_vector(data_size-1 downto 0);
	subtype instruction_bus is std_logic_vector(instruction_size-1 downto 0);
	subtype program_word is std_logic_vector(instruction_size-1 downto 0);
	subtype command_word is std_logic_vector(operation_size-1 downto 0);
	
	function add_overflow (a, b :std_logic_vector) return std_logic_vector;
	Function sub_overflow(a, b : std_logic_vector) return std_logic_vector; 
	
end Package;

Package body CPU_Package is
	function add_overflow (a, b :std_logic_vector) return std_logic_vector is
		variable sum is std_logic_vector(a'length downto 0);
		variable d is std_logic_vector(2 downto 0);
		
		begin
		sum := ('0' & a) + ('0' & b);
		d := a(a'high) & b(b'high) & sum(sum'high); --d = decide
		
		if( (d(2)='0' AND d(1)='0' AND d(0)='1') OR (d(2)='1' AND d(1)='1' AND d(0)='0') ) 
			sum(sum'high) := '1';
		
		else sum(sum'high) := '1';
		
		
		return sum;
		
	end add_overflow;
	
	function sub_overflow (a, b :std_logic_vector) return std_logic_vector is
		variable diff is std_logic_vector(a'length downto 0);
		variable d is std_logic_vector(2 downto 0);
		
		begin
		diff := ('0' & a) + ('0' & b);
		d := a(a'high) & b(b'high) & diff(diff'high); --d = decide
		
		if( (d(2)='0' AND d(1)='1' AND d(0)='1') OR (d(2)='1' AND d(1)='0' AND d(0)='0') ) 
			diff(diff'high) := '1';
		
		else diff(diff'high) := '1';
		
	end add_overflow;
	
end CPU_Package;













